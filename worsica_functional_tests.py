# Generated by Selenium IDE
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.support import expected_conditions as EC

from worsica_web_intermediate import settings
from worsica_api import logger
import argparse

worsica_logger = logger.init_logger('WorSiCa-Intermediate.FunctionalTests', settings.LOG_PATH)

WAIT_TIMEOUT_SEC = 20
WAIT_TIME_SEC = 2
WINDOW_WIDTH = 1366
WINDOW_HEIGHT = 768
WORSICA_WEB_PATH = os.getcwd()
ENDPOINT_URL = "http://intermediate:8002"
WORKSPACES_URL = "/admin"
TEST_USERNAME = os.getenv('WORSICA_INTERMEDIATE_SELENIUM_USERNAME')
TEST_PWD = os.getenv('WORSICA_INTERMEDIATE_SELENIUM_PWD')
HEADLESS = True


def _do_login(driver):
    '''
    driver does the login
    '''
    worsica_logger.info('[do_login]: Login')
    WebDriverWait(driver, WAIT_TIMEOUT_SEC).until(EC.presence_of_element_located((By.ID, "id_username")))
    driver.find_element(By.ID, "id_username").send_keys(TEST_USERNAME)
    driver.find_element(By.ID, "id_password").send_keys(TEST_PWD)
    driver.find_element(By.CLASS_NAME, 'submit-row').find_element(By.TAG_NAME, "input").click()  # click on login
    time.sleep(WAIT_TIME_SEC)


def _do_logout(driver):
    '''
    driver does the logout
    '''
    worsica_logger.info('[do_logout]: Logout')
    driver.find_element(By.ID, "user-tools").find_elements(By.TAG_NAME, "a")[2].click()
    time.sleep(WAIT_TIME_SEC)


def t01_authentication(driver):
    '''
    T01: do a simple test with authentication
    Steps:
    1- Login
    2- Go directly to the workspaces pages, do nothing
    3- Logout
    '''
    worsica_logger.info('[t01_authentication]: do a simple test with authentication')
    driver.get(ENDPOINT_URL + WORKSPACES_URL)
    # Loginpage
    _do_login(driver)
    # Logout
    _do_logout(driver)
    worsica_logger.info('[t01_authentication]: OK!')


def create_driver(driver_name, headless):
    '''
    function to create the driver and its respective options
    '''
    if driver_name == 'chrome':  # chrome
        chrome_options = ChromeOptions()
        chrome_options.headless = headless
        chrome_options.add_argument("--window-size=" + str(WINDOW_WIDTH) + "," + str(WINDOW_HEIGHT))
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        return webdriver.Chrome(options=chrome_options, executable_path=WORSICA_WEB_PATH + '/functional_tests_files/chromedriver_linux64/chromedriver')
    elif driver_name == 'firefox':
        firefox_options = FirefoxOptions()
        firefox_options.headless = headless
        firefox_options.add_argument("--width=" + str(WINDOW_WIDTH))
        firefox_options.add_argument("--height=" + str(WINDOW_HEIGHT))
        return webdriver.Firefox(options=firefox_options, executable_path=WORSICA_WEB_PATH + '/functional_tests_files/geckodriver_linux64/geckodriver')
    else:
        raise Exception('ERROR: That driver does not exist.')


def test_web_drivers():
    '''
    do the tests with the chrome driver
    '''
    drivers = ['chrome', 'firefox']
    # set exports for chrome if running this through a X11 remote session
    os.environ['QT_X11_NO_MITSHM'] = '1'
    os.environ['_X11_NO_MITSHM'] = '1'
    os.environ['_MITSHM'] = '0'
    for drv in drivers:
        worsica_logger.info('[test_web_drivers]: Test the Web driver: ' + drv)
        driver = create_driver(drv, HEADLESS)
        t01_authentication(driver)
        driver.close()
        driver.quit()


# Usage: ./worsica_functional_tests.py
# e.g: ./worsica_functional_tests.py
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='worsica_functional_tests: Apply functional tests to the web interface.')
    parser.add_argument('-nj', '--nojenkins', help='Do not run these tests as jenkins environment.', action="store_true", required=False)
    parser.add_argument('-nh', '--noheadless', help='Do these tests in non headless mode, i.e, show browser for debug.', action="store_true", required=False)
    args = parser.parse_args()
    if args.noheadless:
        HEADLESS = False
    if args.nojenkins:
        ENDPOINT_URL = "http://localhost:8002"
    worsica_logger.info("Headless? " + str(HEADLESS))
    worsica_logger.info("Endpoint url? " + ENDPOINT_URL)
    test_web_drivers()
